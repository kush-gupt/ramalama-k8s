name: Build Container Images (Modular)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  BASE_IMAGE_NAME_SUFFIX: centos-ramalama-min

jobs:
  determine-image-owner:
    name: Determine Image Owner
    runs-on: ubuntu-latest
    outputs:
      owner: ${{ steps.get_owner.outputs.OWNER }}
      registry_owner_path: ${{ steps.get_owner.outputs.REGISTRY_OWNER_PATH }}
    steps:
      - name: Get and lowercase repository owner
        id: get_owner
        run: |
          OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "OWNER=$OWNER" >> $GITHUB_OUTPUT
          echo "REGISTRY_OWNER_PATH=${{ env.REGISTRY }}/$OWNER" >> $GITHUB_OUTPUT

  discover-models:
    name: Discover Models
    runs-on: ubuntu-latest
    outputs:
      models: ${{ steps.get_models.outputs.models }}
      has_models: ${{ steps.get_models.outputs.has_models }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-yaml

      - name: Discover models from configuration
        id: get_models
        run: |
          # Create a script to extract models from YAML
          cat > extract_models.py << 'EOF'
          import yaml
          import json
          import sys
          import os
          
          def sanitize_name(name):
              import re
              return re.sub(r'[^a-z0-9-]', '-', name.lower()).strip('-')
          
          def main():
              config_file = 'models/models.yaml'
              if not os.path.exists(config_file):
                  print("No models.yaml found, using filesystem discovery")
                  # Fallback: discover from containerfiles
                  models = []
                  containerfiles_dir = 'containerfiles'
                  if os.path.exists(containerfiles_dir):
                      for file in os.listdir(containerfiles_dir):
                          if file.startswith('Containerfile-') and not file.endswith('-min'):
                              model_name = file.replace('Containerfile-', '')
                              models.append({
                                  'key': model_name,
                                  'name': model_name.replace('-', ' ').title(),
                                  'model_source': 'quay.io/kugupta/unknown:latest',
                                  'containerfile': file
                              })
                  
                  output = {
                      'include': models
                  }
                  print(json.dumps(output))
                  print(f"has_models={'true' if models else 'false'}")
                  return
              
              with open(config_file, 'r') as f:
                  config = yaml.safe_load(f)
              
              if 'models' not in config or not config['models']:
                  print('{"include": []}')
                  print("has_models=false")
                  return
              
              models = []
              for model_key, model_config in config['models'].items():
                  model_name_safe = sanitize_name(model_key)
                  models.append({
                      'key': model_key,
                      'name': model_config.get('name', model_key),
                      'name_safe': model_name_safe,
                      'model_source': model_config.get('model_source', 'unknown'),
                      'containerfile': f'Containerfile-{model_name_safe}'
                  })
              
              output = {
                  'include': models
              }
              print(json.dumps(output))
              print(f"has_models={'true' if models else 'false'}")
          
          if __name__ == '__main__':
              main()
          EOF
          
          # Run the script and capture output
          python3 extract_models.py > models_output.txt 2>&1
          
          # Extract the JSON and has_models flag
          MODELS_JSON=$(head -n 1 models_output.txt)
          HAS_MODELS=$(tail -n 1 models_output.txt | grep "has_models=" | cut -d'=' -f2)
          
          echo "models=$MODELS_JSON" >> $GITHUB_OUTPUT
          echo "has_models=${HAS_MODELS:-false}" >> $GITHUB_OUTPUT
          
          echo "Discovered models:"
          echo "$MODELS_JSON" | python3 -m json.tool || echo "Invalid JSON: $MODELS_JSON"

  build-base-image:
    name: Build Base Image
    runs-on: ubuntu-latest
    needs: determine-image-owner
    permissions:
      contents: read
      packages: write
    outputs:
      base_image_tag: ${{ steps.image_tags.outputs.TAG_LATEST }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environment
        run: |
          sudo sysctl -w net.ipv6.conf.all.disable_ipv6=1
          sudo sysctl -w net.ipv6.conf.default.disable_ipv6=1

      - name: Upgrade to Podman 5
        run: |
          sudo add-apt-repository "deb http://archive.ubuntu.com/ubuntu oracular universe"
          sudo apt-get update
          sudo apt-get purge firefox
          sudo apt-get upgrade

      - name: Free Disk Space
        run: |
          sudo docker rmi "$(docker image ls -aq)" >/dev/null 2>&1 || true
          sudo rm -rf \
            /usr/share/dotnet /usr/local/lib/android /opt/ghc \
            /usr/local/share/powershell /usr/share/swift /usr/local/.ghcup \
            /usr/share/dotnet /usr/lib/jvm /opt/hostedtoolcache/CodeQL \
            "$AGENT_TOOLSDIRECTORY" || true
          sudo swapoff -a
          sudo rm -f /mnt/Swapfile

      - name: Reconfigure Docker storage
        run: |
          sudo mkdir -p /mnt/docker /etc/docker
          echo '{"data-root": "/mnt/docker"}' > /tmp/daemon.json
          sudo mv /tmp/daemon.json /etc/docker/daemon.json
          cat /etc/docker/daemon.json
          sudo systemctl restart docker.service
          df -h

      - name: Log in to Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | podman login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: Define Image Tags
        id: image_tags
        run: |
          OWNER_PATH="${{ needs.determine-image-owner.outputs.registry_owner_path }}"
          IMAGE_BASENAME="${{ env.BASE_IMAGE_NAME_SUFFIX }}"
          TAG_LATEST="${OWNER_PATH}/${IMAGE_BASENAME}:latest"
          TAG_SHA="${OWNER_PATH}/${IMAGE_BASENAME}:${{ github.sha }}"
          echo "TAG_LATEST=${TAG_LATEST}" >> $GITHUB_OUTPUT
          echo "TAG_SHA=${TAG_SHA}" >> $GITHUB_OUTPUT

      - name: Build Base Image
        run: |
          podman --storage-driver overlay build --squash-all \
            --format=oci \
            --tag ${{ steps.image_tags.outputs.TAG_LATEST }} \
            --tag ${{ steps.image_tags.outputs.TAG_SHA }} \
            -f ./containerfiles/Containerfile-min \
            .

      - name: Push Base Image (with retry)
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 15
          max_attempts: 3
          retry_wait_seconds: 30
          command: |
            podman --storage-driver overlay push ${{ steps.image_tags.outputs.TAG_LATEST }}
            podman --storage-driver overlay push ${{ steps.image_tags.outputs.TAG_SHA }}

  build-model-images:
    name: Build Model Images
    runs-on: ubuntu-latest
    needs: [determine-image-owner, discover-models, build-base-image]
    if: needs.discover-models.outputs.has_models == 'true'
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.discover-models.outputs.models) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environment
        run: |
          sudo sysctl -w net.ipv6.conf.all.disable_ipv6=1
          sudo sysctl -w net.ipv6.conf.default.disable_ipv6=1

      - name: Upgrade to Podman 5
        run: |
          sudo add-apt-repository "deb http://archive.ubuntu.com/ubuntu oracular universe"
          sudo apt-get update
          sudo apt-get purge firefox
          sudo apt-get upgrade

      - name: Free Disk Space
        run: |
          sudo docker rmi "$(docker image ls -aq)" >/dev/null 2>&1 || true
          sudo rm -rf \
            /usr/share/dotnet /usr/local/lib/android /opt/ghc \
            /usr/local/share/powershell /usr/share/swift /usr/local/.ghcup \
            /usr/share/dotnet /usr/lib/jvm /opt/hostedtoolcache/CodeQL \
            "$AGENT_TOOLSDIRECTORY" || true
          sudo swapoff -a
          sudo rm -f /mnt/Swapfile

      - name: Reconfigure Docker storage  
        run: |
          sudo mkdir -p /mnt/docker /etc/docker
          echo '{"data-root": "/mnt/docker"}' > /tmp/daemon.json
          sudo mv /tmp/daemon.json /etc/docker/daemon.json
          cat /etc/docker/daemon.json
          sudo systemctl restart docker.service
          df -h

      - name: Log in to Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | podman login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: Define Image Tags
        id: image_tags
        run: |
          OWNER_PATH="${{ needs.determine-image-owner.outputs.registry_owner_path }}"
          MODEL_NAME_SAFE="${{ matrix.name_safe || matrix.key }}"
          APP_IMAGE_BASENAME="${MODEL_NAME_SAFE}-ramalama"
          TAG_LATEST="${OWNER_PATH}/${APP_IMAGE_BASENAME}:latest"
          TAG_SHA="${OWNER_PATH}/${APP_IMAGE_BASENAME}:${{ github.sha }}"
          echo "TAG_LATEST=${TAG_LATEST}" >> $GITHUB_OUTPUT
          echo "TAG_SHA=${TAG_SHA}" >> $GITHUB_OUTPUT
          echo "Building: ${{ matrix.name }} (${{ matrix.key }})"

      - name: Build ${{ matrix.name }} Image
        run: |
          sudo podman --storage-driver overlay --root='/mnt/docker' build --squash-all \
            --format=oci \
            --build-arg BASE_IMAGE_NAME=${{ needs.build-base-image.outputs.base_image_tag }} \
            --build-arg MODEL_SOURCE_NAME=${{ matrix.model_source }} \
            --tag ${{ steps.image_tags.outputs.TAG_LATEST }} \
            --tag ${{ steps.image_tags.outputs.TAG_SHA }} \
            -f ./containerfiles/${{ matrix.containerfile }} \
            .

      - name: Push ${{ matrix.name }} Image (with retry)
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 30
          max_attempts: 3
          retry_wait_seconds: 10
          command: |
            sudo podman --storage-driver overlay --root='/mnt/docker' push ${{ steps.image_tags.outputs.TAG_LATEST }}
            sudo podman --storage-driver overlay --root='/mnt/docker' push ${{ steps.image_tags.outputs.TAG_SHA }}

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [discover-models, build-base-image, build-model-images]
    if: always()
    steps:
      - name: Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Base Image:** ${{ needs.build-base-image.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**Models Discovered:** ${{ needs.discover-models.outputs.has_models == 'true' && 'Yes' || 'No' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Model Images:** ${{ needs.build-model-images.result || 'Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.discover-models.outputs.has_models }}" == "true" ]]; then
            echo "### Models Built:" >> $GITHUB_STEP_SUMMARY
            echo '${{ needs.discover-models.outputs.models }}' | python3 -c "
          import json, sys
          models = json.load(sys.stdin)
          for model in models.get('include', []):
              print(f\"- **{model.get('name', model['key'])}** ({model['key']})\")
          " >> $GITHUB_STEP_SUMMARY || echo "- Unable to parse models list" >> $GITHUB_STEP_SUMMARY
          fi 